#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LinqToSqlDemoApp
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="dotnet_exam")]
	public partial class LinqToSqlDemoAppDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAddress(Address instance);
    partial void UpdateAddress(Address instance);
    partial void DeleteAddress(Address instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertPeople(People instance);
    partial void UpdatePeople(People instance);
    partial void DeletePeople(People instance);
    #endregion
		
		public LinqToSqlDemoAppDataContext() : 
				base(global::LinqToSqlDemoApp.Properties.Settings.Default.dotnet_examConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public LinqToSqlDemoAppDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqToSqlDemoAppDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqToSqlDemoAppDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqToSqlDemoAppDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Address> Addresses
		{
			get
			{
				return this.GetTable<Address>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<People> Peoples
		{
			get
			{
				return this.GetTable<People>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Address")]
	public partial class Address : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AddressID;
		
		private string _HouseNo;
		
		private string _Street;
		
		private string _Barangay;
		
		private string _City;
		
		private int _People_ID;
		
		private EntityRef<People> _People;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAddressIDChanging(int value);
    partial void OnAddressIDChanged();
    partial void OnHouseNoChanging(string value);
    partial void OnHouseNoChanged();
    partial void OnStreetChanging(string value);
    partial void OnStreetChanged();
    partial void OnBarangayChanging(string value);
    partial void OnBarangayChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnPeople_IDChanging(int value);
    partial void OnPeople_IDChanged();
    #endregion
		
		public Address()
		{
			this._People = default(EntityRef<People>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AddressID
		{
			get
			{
				return this._AddressID;
			}
			set
			{
				if ((this._AddressID != value))
				{
					this.OnAddressIDChanging(value);
					this.SendPropertyChanging();
					this._AddressID = value;
					this.SendPropertyChanged("AddressID");
					this.OnAddressIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HouseNo", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string HouseNo
		{
			get
			{
				return this._HouseNo;
			}
			set
			{
				if ((this._HouseNo != value))
				{
					this.OnHouseNoChanging(value);
					this.SendPropertyChanging();
					this._HouseNo = value;
					this.SendPropertyChanged("HouseNo");
					this.OnHouseNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Street", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Street
		{
			get
			{
				return this._Street;
			}
			set
			{
				if ((this._Street != value))
				{
					this.OnStreetChanging(value);
					this.SendPropertyChanging();
					this._Street = value;
					this.SendPropertyChanged("Street");
					this.OnStreetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Barangay", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Barangay
		{
			get
			{
				return this._Barangay;
			}
			set
			{
				if ((this._Barangay != value))
				{
					this.OnBarangayChanging(value);
					this.SendPropertyChanging();
					this._Barangay = value;
					this.SendPropertyChanged("Barangay");
					this.OnBarangayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_People_ID", DbType="Int NOT NULL")]
		public int People_ID
		{
			get
			{
				return this._People_ID;
			}
			set
			{
				if ((this._People_ID != value))
				{
					if (this._People.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPeople_IDChanging(value);
					this.SendPropertyChanging();
					this._People_ID = value;
					this.SendPropertyChanged("People_ID");
					this.OnPeople_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="People_Address", Storage="_People", ThisKey="People_ID", OtherKey="PeopleID", IsForeignKey=true)]
		public People People
		{
			get
			{
				return this._People.Entity;
			}
			set
			{
				People previousValue = this._People.Entity;
				if (((previousValue != value) 
							|| (this._People.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._People.Entity = null;
						previousValue.Addresses.Remove(this);
					}
					this._People.Entity = value;
					if ((value != null))
					{
						value.Addresses.Add(this);
						this._People_ID = value.PeopleID;
					}
					else
					{
						this._People_ID = default(int);
					}
					this.SendPropertyChanged("People");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customer")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CustomerID;
		
		private string _Schedule_Record;
		
		private System.Nullable<int> _People_ID;
		
		private EntityRef<People> _People;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    partial void OnSchedule_RecordChanging(string value);
    partial void OnSchedule_RecordChanged();
    partial void OnPeople_IDChanging(System.Nullable<int> value);
    partial void OnPeople_IDChanged();
    #endregion
		
		public Customer()
		{
			this._People = default(EntityRef<People>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Schedule_Record", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Schedule_Record
		{
			get
			{
				return this._Schedule_Record;
			}
			set
			{
				if ((this._Schedule_Record != value))
				{
					this.OnSchedule_RecordChanging(value);
					this.SendPropertyChanging();
					this._Schedule_Record = value;
					this.SendPropertyChanged("Schedule_Record");
					this.OnSchedule_RecordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_People_ID", DbType="Int")]
		public System.Nullable<int> People_ID
		{
			get
			{
				return this._People_ID;
			}
			set
			{
				if ((this._People_ID != value))
				{
					if (this._People.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPeople_IDChanging(value);
					this.SendPropertyChanging();
					this._People_ID = value;
					this.SendPropertyChanged("People_ID");
					this.OnPeople_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="People_Customer", Storage="_People", ThisKey="People_ID", OtherKey="PeopleID", IsForeignKey=true)]
		public People People
		{
			get
			{
				return this._People.Entity;
			}
			set
			{
				People previousValue = this._People.Entity;
				if (((previousValue != value) 
							|| (this._People.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._People.Entity = null;
						previousValue.Customers.Remove(this);
					}
					this._People.Entity = value;
					if ((value != null))
					{
						value.Customers.Add(this);
						this._People_ID = value.PeopleID;
					}
					else
					{
						this._People_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("People");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employee")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmployeeID;
		
		private decimal _Salary;
		
		private System.DateTime _DateHired;
		
		private System.Nullable<int> _People_ID;
		
		private EntityRef<People> _People;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnSalaryChanging(decimal value);
    partial void OnSalaryChanged();
    partial void OnDateHiredChanging(System.DateTime value);
    partial void OnDateHiredChanged();
    partial void OnPeople_IDChanging(System.Nullable<int> value);
    partial void OnPeople_IDChanged();
    #endregion
		
		public Employee()
		{
			this._People = default(EntityRef<People>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Salary", DbType="Decimal(18,0) NOT NULL")]
		public decimal Salary
		{
			get
			{
				return this._Salary;
			}
			set
			{
				if ((this._Salary != value))
				{
					this.OnSalaryChanging(value);
					this.SendPropertyChanging();
					this._Salary = value;
					this.SendPropertyChanged("Salary");
					this.OnSalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateHired", DbType="Date NOT NULL")]
		public System.DateTime DateHired
		{
			get
			{
				return this._DateHired;
			}
			set
			{
				if ((this._DateHired != value))
				{
					this.OnDateHiredChanging(value);
					this.SendPropertyChanging();
					this._DateHired = value;
					this.SendPropertyChanged("DateHired");
					this.OnDateHiredChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_People_ID", DbType="Int")]
		public System.Nullable<int> People_ID
		{
			get
			{
				return this._People_ID;
			}
			set
			{
				if ((this._People_ID != value))
				{
					if (this._People.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPeople_IDChanging(value);
					this.SendPropertyChanging();
					this._People_ID = value;
					this.SendPropertyChanged("People_ID");
					this.OnPeople_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="People_Employee", Storage="_People", ThisKey="People_ID", OtherKey="PeopleID", IsForeignKey=true)]
		public People People
		{
			get
			{
				return this._People.Entity;
			}
			set
			{
				People previousValue = this._People.Entity;
				if (((previousValue != value) 
							|| (this._People.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._People.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._People.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._People_ID = value.PeopleID;
					}
					else
					{
						this._People_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("People");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.People")]
	public partial class People : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PeopleID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private EntitySet<Address> _Addresses;
		
		private EntitySet<Customer> _Customers;
		
		private EntitySet<Employee> _Employees;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPeopleIDChanging(int value);
    partial void OnPeopleIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    #endregion
		
		public People()
		{
			this._Addresses = new EntitySet<Address>(new Action<Address>(this.attach_Addresses), new Action<Address>(this.detach_Addresses));
			this._Customers = new EntitySet<Customer>(new Action<Customer>(this.attach_Customers), new Action<Customer>(this.detach_Customers));
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PeopleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PeopleID
		{
			get
			{
				return this._PeopleID;
			}
			set
			{
				if ((this._PeopleID != value))
				{
					this.OnPeopleIDChanging(value);
					this.SendPropertyChanging();
					this._PeopleID = value;
					this.SendPropertyChanged("PeopleID");
					this.OnPeopleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="People_Address", Storage="_Addresses", ThisKey="PeopleID", OtherKey="People_ID")]
		public EntitySet<Address> Addresses
		{
			get
			{
				return this._Addresses;
			}
			set
			{
				this._Addresses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="People_Customer", Storage="_Customers", ThisKey="PeopleID", OtherKey="People_ID")]
		public EntitySet<Customer> Customers
		{
			get
			{
				return this._Customers;
			}
			set
			{
				this._Customers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="People_Employee", Storage="_Employees", ThisKey="PeopleID", OtherKey="People_ID")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.People = this;
		}
		
		private void detach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.People = null;
		}
		
		private void attach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.People = this;
		}
		
		private void detach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.People = null;
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.People = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.People = null;
		}
	}
}
#pragma warning restore 1591
